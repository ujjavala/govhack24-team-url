openapi: 3.0.3
info:
  title: Welcome to Haven - OpenAPI 3.0
  description: |-
    This openapi spec contains details for apis in Haven
    
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://haven.swagger.io/api/v3
tags:
  - name: Haven
    description: Everything about finding a safe space
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
   
    get:
      parameters:
        - name: status
          in: query
          required: true
          schema: {}
      tags:
        - user
      summary: Get users with status
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/{id}:
    parameters:
    - name: id
      in: path
      required: true
      schema: {}
    get:
      tags:
        - user
      summary: Get a user by its id.
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - user
      summary: Update a user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - user
      summary: Delete a user.
      responses:
        200:
          description: ""
          content:
            application/json:
              schema: {}
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation

  /feeds:
    post:
      tags:
        - feed
      summary: Create feed
      description: This created feed
      operationId: createFeed
      requestBody:
        description: Created feed object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feed'
          application/xml:
            schema:
              $ref: '#/components/schemas/Feed'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Feed'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
            application/xml:
              schema:
                $ref: '#/components/schemas/Feed'
   
    get:
      tags:
        - feed
      summary: Get users with status
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Feed'
  /feed/{id}:
    parameters:
    - name: id
      in: path
      required: true
      schema: {}
    get:
      tags:
        - feed
      summary: Get a feed by its id.
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
    put:
      tags:
        - feed
      summary: Update a feed.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Feed'
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feed'
    delete:
      tags:
        - feed
      summary: Delete a feed.
      responses:
        200:
          description: ""
          content:
            application/json:
              schema: {} 
              

  /service-suggester:
    parameters:
    - name: location
      in: query
      required: true
      schema: {}
    get:
      tags:
        - service-suggester
      summary: Get service by its location.
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'  

  /safe-space-suggester:
    parameters:
    - name: location
      in: query
      required: true
      schema: {}
    get:
      tags:
        - safe-space-suggester
      summary: Get service by its location.
      responses:
        200:
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvacuationPoint'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: jane_doe
        firstName:
          type: string
          example: Jane
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john@email.com
        location:
          type: string
          example: olympic park
        status:
          type: string
          example: active
        isVolunteer: 
          type: boolean
          example: true
    Feed:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        userId:
          type: integer
          format: int64
          example: 123
        description:
          type: string
          example: need help around olympic park
        createdAt:
          type: string
          example: James
        deletedAt:
          type: string
          example: john@email.com
        location:
          type: string
          example: 'olympic park'
        status:
          type: integer
          description: Feed Status
          format: int32
          example: 1
    Service:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        description:
          type: string
          example: need help around olympic park
    EvacuationPoint:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        location:
          type: string
          example: Near George Street
    Alert:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        description:
          type: string
          example: Bushfire 2km away
        createdAt:
          type: string
          example: James
        deletedAt:
          type: string
        type:
          type: string 
        mapUrl:
          type: string