/* tslint:disable */
/* eslint-disable */
/**
 * Welcome to Haven - OpenAPI 3.0
 * This openapi spec contains details for apis in Haven
 *
 * OpenAPI spec version: 1.0.11
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Feed } from '../models';
/**
 * FeedApi - axios parameter creator
 * @export
 */
export const FeedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This created feed
         * @summary Create feed
         * @param {Feed} [body] Created feed object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeed: async (body?: Feed, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This created feed
         * @summary Create feed
         * @param {number} [id] 
         * @param {number} [userId] 
         * @param {string} [description] 
         * @param {string} [createdAt] 
         * @param {string} [deletedAt] 
         * @param {string} [location] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeedForm: async (id?: number, userId?: number, description?: string, createdAt?: string, deletedAt?: string, location?: string, status?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }

            if (userId !== undefined) { 
                localVarFormParams.set('userId', userId as any);
            }

            if (description !== undefined) { 
                localVarFormParams.set('description', description as any);
            }

            if (createdAt !== undefined) { 
                localVarFormParams.set('createdAt', createdAt as any);
            }

            if (deletedAt !== undefined) { 
                localVarFormParams.set('deletedAt', deletedAt as any);
            }

            if (location !== undefined) { 
                localVarFormParams.set('location', location as any);
            }

            if (status !== undefined) { 
                localVarFormParams.set('status', status as any);
            }
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a feed.
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedIdDelete: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling feedIdDelete.');
            }
            const localVarPath = `/feed/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a feed by its id.
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedIdGet: async (id: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling feedIdGet.');
            }
            const localVarPath = `/feed/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a feed.
         * @param {any} id 
         * @param {Feed} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedIdPut: async (id: any, body?: Feed, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling feedIdPut.');
            }
            const localVarPath = `/feed/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get users with status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/feeds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeedApi - functional programming interface
 * @export
 */
export const FeedApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This created feed
         * @summary Create feed
         * @param {Feed} [body] Created feed object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeed(body?: Feed, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Feed>>> {
            const localVarAxiosArgs = await FeedApiAxiosParamCreator(configuration).createFeed(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This created feed
         * @summary Create feed
         * @param {number} [id] 
         * @param {number} [userId] 
         * @param {string} [description] 
         * @param {string} [createdAt] 
         * @param {string} [deletedAt] 
         * @param {string} [location] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeedForm(id?: number, userId?: number, description?: string, createdAt?: string, deletedAt?: string, location?: string, status?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Feed>>> {
            const localVarAxiosArgs = await FeedApiAxiosParamCreator(configuration).createFeedForm(id, userId, description, createdAt, deletedAt, location, status, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete a feed.
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedIdDelete(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await FeedApiAxiosParamCreator(configuration).feedIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get a feed by its id.
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedIdGet(id: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Feed>>> {
            const localVarAxiosArgs = await FeedApiAxiosParamCreator(configuration).feedIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update a feed.
         * @param {any} id 
         * @param {Feed} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedIdPut(id: any, body?: Feed, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Feed>>> {
            const localVarAxiosArgs = await FeedApiAxiosParamCreator(configuration).feedIdPut(id, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get users with status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Feed>>>> {
            const localVarAxiosArgs = await FeedApiAxiosParamCreator(configuration).feedsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FeedApi - factory interface
 * @export
 */
export const FeedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This created feed
         * @summary Create feed
         * @param {Feed} [body] Created feed object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeed(body?: Feed, options?: AxiosRequestConfig): Promise<AxiosResponse<Feed>> {
            return FeedApiFp(configuration).createFeed(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This created feed
         * @summary Create feed
         * @param {number} [id] 
         * @param {number} [userId] 
         * @param {string} [description] 
         * @param {string} [createdAt] 
         * @param {string} [deletedAt] 
         * @param {string} [location] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeedForm(id?: number, userId?: number, description?: string, createdAt?: string, deletedAt?: string, location?: string, status?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Feed>> {
            return FeedApiFp(configuration).createFeedForm(id, userId, description, createdAt, deletedAt, location, status, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a feed.
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedIdDelete(id: any, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return FeedApiFp(configuration).feedIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a feed by its id.
         * @param {any} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedIdGet(id: any, options?: AxiosRequestConfig): Promise<AxiosResponse<Feed>> {
            return FeedApiFp(configuration).feedIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a feed.
         * @param {any} id 
         * @param {Feed} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedIdPut(id: any, body?: Feed, options?: AxiosRequestConfig): Promise<AxiosResponse<Feed>> {
            return FeedApiFp(configuration).feedIdPut(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get users with status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Feed>>> {
            return FeedApiFp(configuration).feedsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeedApi - object-oriented interface
 * @export
 * @class FeedApi
 * @extends {BaseAPI}
 */
export class FeedApi extends BaseAPI {
    /**
     * This created feed
     * @summary Create feed
     * @param {Feed} [body] Created feed object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public async createFeed(body?: Feed, options?: AxiosRequestConfig) : Promise<AxiosResponse<Feed>> {
        return FeedApiFp(this.configuration).createFeed(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This created feed
     * @summary Create feed
     * @param {number} [id] 
     * @param {number} [userId] 
     * @param {string} [description] 
     * @param {string} [createdAt] 
     * @param {string} [deletedAt] 
     * @param {string} [location] 
     * @param {number} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public async createFeedForm(id?: number, userId?: number, description?: string, createdAt?: string, deletedAt?: string, location?: string, status?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Feed>> {
        return FeedApiFp(this.configuration).createFeedForm(id, userId, description, createdAt, deletedAt, location, status, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete a feed.
     * @param {any} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public async feedIdDelete(id: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return FeedApiFp(this.configuration).feedIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get a feed by its id.
     * @param {any} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public async feedIdGet(id: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<Feed>> {
        return FeedApiFp(this.configuration).feedIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update a feed.
     * @param {any} id 
     * @param {Feed} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public async feedIdPut(id: any, body?: Feed, options?: AxiosRequestConfig) : Promise<AxiosResponse<Feed>> {
        return FeedApiFp(this.configuration).feedIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get users with status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     */
    public async feedsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Feed>>> {
        return FeedApiFp(this.configuration).feedsGet(options).then((request) => request(this.axios, this.basePath));
    }
}
